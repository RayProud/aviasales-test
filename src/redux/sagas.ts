import { put, take } from 'redux-saga/effects';
import actions from './actionsCombine';
import { SearchResponse, TicketsResponse, StartSearching } from './tickets/types';

const { ticketsResponseSuccess } = actions;

const SEARCH_URL = 'https://front-test.beta.aviasales.ru/search';
const TICKETS_URL = 'https://front-test.beta.aviasales.ru/tickets';

// –¥–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –¥–ª—è fetch'–∞ –ª—é–±–æ–π —Å–æ—Å—Ç–æ—è–≤—à–∏–π—Å—è –∑–∞–ø—Ä–æ—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º
// –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–≥–æ ‚Äî —ç—Ç–æ CORS –∏ –æ—Ç—Å—É—Å—Ç–≤–∏–µ —Å–µ—Ç–∏ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É–∂–µ –≤ .catch
function checkStatus(response: Response) {
    if (response.status >= 200 && response.status < 300) {
        return response;
    }

    const { url = '', status = '', statusText = '' } = response;

    const error = new Error(`url: ${url}, status: ${status}, statusText: ${statusText}`);
    throw error;
}

function parseJSON(response: Response) {
    return response.json();
}

/**
 * –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ fetch –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞, —ç–º—É–ª–∏—Ä—É–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ race-condition
 * @param request –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∑–∞–ø—Ä–æ—Å
 * @param timeout –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—Å –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
 * @throws –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ timeout
 */
function fetchTimeout(request: ReturnType<typeof fetch>, timeout = 2000) {
    return Promise.race([
        request,
        new Promise<never>((_, reject) =>
        setTimeout(() => {
            reject(new Error("Request timeout"));
        }, timeout)
        )
    ]);
}

// –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ await response.text() –¥–ª—è –±–∞–∂–Ω–æ–≥–æ —Ö—Ä–æ–º–∞
const request = <T>(url: string): Promise<T> => {
    function fetchWithErrors(url: string, repeats: number = 5): Promise<T> {
        let retries = repeats;

        return fetch(url)
            .then(checkStatus)
            .then(parseJSON)
            .then(body => body)
            .catch(error => {
                console.log('error in catch, retries', retries, error);
                if (retries > 0) {
                    return fetchWithErrors(url, retries - 1);
                }

                throw error;
            })
    }

    return fetchWithErrors(url);
}

function* rootSaga() {
  while (true) {
    yield take<StartSearching>('START_SEARCHING');

    try {
        // –ö–∞–∫ –±—ã —Å—é–¥–∞ —Ç–∏–ø—ã –ø—Ä–æ—Å—É–Ω—É—Ç—å? ü§î
        const searchResponse: SearchResponse = yield request<SearchResponse>(SEARCH_URL);
        const { searchId } = searchResponse;

        let haveTickets = true;
        let count = 0;

        // –Ω–∞—á–∞—Ç—å –∫—Ä—É—Ç–∏—Ç—å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –Ω–∞–¥ –±–∏–ª–µ—Ç–∞–º–∏
        while (haveTickets) {
            const ticketsResponse: TicketsResponse = yield request(`${TICKETS_URL}?searchId=${searchId}`);
            const { tickets, stop } = ticketsResponse;
            if (count === 0) {
                // –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å —Å–ø–µ—Ä–≤–∞ –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é —Å—Ä–∞–∑—É –≤ —Å—Ç–æ—Ä, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å,
                // –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—Ç–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ webworker
                // –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å) –æ—Ç webworker'–∞ –∏ –ø–æ–¥–ø—É—à–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                // –≤—Å—ë —ç—Ç–æ –≤—Ä–µ–º—è, –ø–æ–∫–∞ –Ω–µ—Ç stop: true, –∫—Ä—É—Ç–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∞–¥–µ—Ä
                console.log('tickets', tickets);
                yield put(ticketsResponseSuccess(tickets));
            }
            count++;
            // console.log(tickets, stop);

            if (stop) {
                // –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
                haveTickets = false;
            }
        }

    } catch(e) {
        console.log('try error', e);
    }
  }
}

export default rootSaga;